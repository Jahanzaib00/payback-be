generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum SubscriptionStatus {
  inactive
  active
  cancelled
}

enum GroupStatus {
  upcoming
  ongoing
  completed
}

enum PaymentStatus {
  pending
  paid
  failed
}

enum ReferralStatus {
  pending
  completed
  cancelled
}

model User {
  id                     String   @id @default(uuid()) @db.Uuid
  email                  String   @unique
  passwordHash           String?  @map("password_hash")
  name                   String
  emailVerified          Boolean  @default(false) @map("email_verified")
  referralCode           String   @unique @map("referral_code")
  referredByUserId       String?  @map("referred_by_user_id") @db.Uuid
  pfCoinBalance          Decimal  @default(0) @map("pf_coin_balance") @db.Decimal(10, 2)
  subscriptionStatus     SubscriptionStatus @default(inactive) @map("subscription_status")
  subscriptionId         String?  @map("subscription_id")
  stripeCustomerId       String?  @map("stripe_customer_id")
  stripeConnectAccountId String?  @map("stripe_connect_account_id")
  createdAt              DateTime @default(now()) @map("created_at")
  updatedAt              DateTime @updatedAt @map("updated_at")

  // Self-referral relationship
  referredBy      User?             @relation("UserReferral", fields: [referredByUserId], references: [id])
  referrals       User[]            @relation("UserReferral")
  Workout         Workout[]
  GroupMembership GroupMembership[]
  WeeklyGoal      WeeklyGoal[]

  @@map("users")
}

model Workout {
  id              String   @id @default(uuid()) @db.Uuid
  userId          String   @map("user_id") @db.Uuid
  groupId         String?  @map("group_id") @db.Uuid
  workoutType     String   @map("workout_type")
  durationMinutes Int      @map("duration_minutes")
  workoutDate     DateTime @map("workout_date")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  user  User   @relation(fields: [userId], references: [id])
  group Group? @relation(fields: [groupId], references: [id])

  @@map("workouts")
}

model Group {
  id              String   @id @default(uuid()) @db.Uuid
  name            String
  description     String?
  weeklyGoal      Int      @map("weekly_goal")
  inviteCode      String   @unique @map("invite_code")
  createdByUserId String   @map("created_by_user_id") @db.Uuid
  maxMembers      Int      @default(10) @map("max_members")
  entryFee        Decimal  @default(100.00) @map("entry_fee") @db.Decimal(8, 2)
  startDate       DateTime @map("start_date")
  endDate         DateTime @map("end_date")
  status          GroupStatus @default(upcoming) @map("status")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  memberships GroupMembership[]
  workouts    Workout[]
  weeklyGoals WeeklyGoal[]

  @@map("groups")
}

model GroupMembership {
  id                    String   @id @default(uuid()) @db.Uuid
  userId                String   @map("user_id") @db.Uuid
  groupId               String   @map("group_id") @db.Uuid
  paymentStatus         PaymentStatus @default(pending) @map("payment_status")
  stripePaymentIntentId String?  @map("stripe_payment_intent_id")
  joinedAt              DateTime @default(now()) @map("joined_at")
  isActive              Boolean  @default(true) @map("is_active")

  user  User  @relation(fields: [userId], references: [id])
  group Group @relation(fields: [groupId], references: [id])

  @@unique([userId, groupId])
  @@map("group_memberships")
}

model WeeklyGoal {
  id                String    @id @default(uuid()) @db.Uuid
  userId            String    @map("user_id") @db.Uuid
  groupId           String    @map("group_id") @db.Uuid
  weekNumber        Int       @map("week_number")
  weekStartDate     DateTime  @map("week_start_date")
  weekEndDate       DateTime  @map("week_end_date")
  targetWorkouts    Int       @map("target_workouts")
  completedWorkouts Int       @default(0) @map("completed_workouts")
  goalAchieved      Boolean   @default(false) @map("goal_achieved")
  pfCoinsEarned     Decimal   @default(0) @map("pf_coins_earned") @db.Decimal(8, 2)
  calculatedAt      DateTime? @map("calculated_at")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")

  user  User  @relation(fields: [userId], references: [id])
  group Group @relation(fields: [groupId], references: [id])

  @@unique([userId, groupId, weekNumber])
  @@map("weekly_goals")
}

model Referral {
  id             String    @id @default(uuid()) @db.Uuid
  referrerUserId String    @map("referrer_user_id") @db.Uuid
  referredUserId String    @map("referred_user_id") @db.Uuid
  status         ReferralStatus @default(pending) @map("status")
  rewardAmount   Decimal   @default(0) @map("reward_amount") @db.Decimal(10, 2)
  rewardPaidAt   DateTime? @map("reward_paid_at")
  createdAt      DateTime  @default(now()) @map("created_at")

  @@unique([referrerUserId, referredUserId])
  @@map("referrals")
}
